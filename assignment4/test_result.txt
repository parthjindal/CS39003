type_qualifier :- volatile
type_specifer :- int
declaration_specifiers :- type_specifier declaration_specifiers_opt
declaration_specifiers :- type_qualifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
declarator :- pointer_opt direct_declarator
init_declarator :- declarator
init_declarator_list :- init_declarator
declaration :- declaration_specifiers init_declarator_list_opt ;
external_declaration :- declaration
translation_unit :- external_declaration
storage_class_specifier :- extern
type_specifer :- int
declaration_specifiers :- type_specifier declaration_specifiers_opt
declaration_specifiers :- storage_class_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
direct_declarator :- direct_declarator ( identifier_list_opt )
declarator :- pointer_opt direct_declarator
init_declarator :- declarator
init_declarator_list :- init_declarator
declaration :- declaration_specifiers init_declarator_list_opt ;
external_declaration :- declaration
translation_unit :- translation_unit external_declaration
type_specifier :- double
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
type_specifier :- double
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
declarator :- pointer_opt direct_declarator
parameter_declaration :- declaration_specifiers declarator
parameter_list :- parameter_declaration
type_specifier :- double
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
declarator :- pointer_opt direct_declarator
parameter_declaration :- declaration_specifiers declarator
parameter_list :- parameter_list , parameter_declaration
parameter_type_list :- parameter_list
direct_declarator :- direct_declarator ( parameter_type_list )
declarator :- pointer_opt direct_declarator
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- additive_expression '+' multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
expression :- assignment_expression
jump_statement :- return expression_opt ;
statement :- jump_statement
block_item :- statement 
block_item_list :- block_item
compound_statement :- { block_item_list_opt } 
function_definition
external_declaration :- function_definition
translation_unit :- translation_unit external_declaration
storage_class_specifier :- static
type_specifier :- char
declaration_specifiers :- type_specifier declaration_specifiers_opt
declaration_specifiers :- storage_class_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
type_specifier :- char
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
declarator :- pointer_opt direct_declarator
parameter_declaration :- declaration_specifiers declarator
parameter_list :- parameter_declaration
type_specifier :- char
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
declarator :- pointer_opt direct_declarator
parameter_declaration :- declaration_specifiers declarator
parameter_list :- parameter_list , parameter_declaration
parameter_type_list :- parameter_list
direct_declarator :- direct_declarator ( parameter_type_list )
declarator :- pointer_opt direct_declarator
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- additive_expression '+' multiplicative_expression
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- additive_expression '-' multiplicative_expression
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- additive_expression '+' multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
expression :- assignment_expression
jump_statement :- return expression_opt ;
statement :- jump_statement
block_item :- statement 
block_item_list :- block_item
compound_statement :- { block_item_list_opt } 
function_definition
external_declaration :- function_definition
translation_unit :- translation_unit external_declaration
type_specifier :- void
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
direct_declarator :- direct_declarator ( identifier_list_opt )
declarator :- pointer_opt direct_declarator
type_specifer :- int
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
declarator :- pointer_opt direct_declarator
init_declarator :- declarator
init_declarator_list :- init_declarator
declaration :- declaration_specifiers init_declarator_list_opt ;
block_item :- declaration 
block_item_list :- block_item
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
assignment_operator :- '='
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
assignment_expression :- unary_expression assignment_operator assignment_expression
expression :- assignment_expression
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- relational_expression '<' shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
expression :- assignment_expression
primary_expression :- identifier
postfix_expression :- primary_expression
postfix_expression :- postfix_expression '++'
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
expression :- assignment_expression
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
assignment_operator :- '='
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
assignment_expression :- unary_expression assignment_operator assignment_expression
expression :- assignment_expression
expression_statement :- expression_opt ; 
statement :- expression_statement
block_item :- statement 
block_item_list :- block_item
compound_statement :- { block_item_list_opt } 
statement :- compound_statement
iteration_statement :- for ( expression_opt ; expression_opt ; expression_opt ) statement
statement :- iteration_statement
block_item :- statement 
block_item_list :- block_item_list block_item
compound_statement :- { block_item_list_opt } 
function_definition
external_declaration :- function_definition
translation_unit :- translation_unit external_declaration
type_specifier :- void
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
direct_declarator :- direct_declarator ( identifier_list_opt )
declarator :- pointer_opt direct_declarator
type_specifier :- float
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
declarator :- pointer_opt direct_declarator
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
initializer :- assignment_expression
init_declarator :- declarator = initializer
init_declarator_list :- init_declarator
declaration :- declaration_specifiers init_declarator_list_opt ;
block_item :- declaration 
block_item_list :- block_item
type_specifier :- char
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
direct_declarator :- direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
declarator :- pointer_opt direct_declarator
primary_expression :- string_literal
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
initializer :- assignment_expression
init_declarator :- declarator = initializer
init_declarator_list :- init_declarator
declaration :- declaration_specifiers init_declarator_list_opt ;
block_item :- declaration 
block_item_list :- block_item_list block_item
type_specifer :- int
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
declarator :- pointer_opt direct_declarator
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
initializer :- assignment_expression
init_declarator :- declarator = initializer
init_declarator_list :- init_declarator
declaration :- declaration_specifiers init_declarator_list_opt ;
block_item :- declaration 
block_item_list :- block_item_list block_item
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
assignment_operator :- '='
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
assignment_expression :- unary_expression assignment_operator assignment_expression
expression :- assignment_expression
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- relational_expression '<' shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
expression :- assignment_expression
primary_expression :- identifier
postfix_expression :- primary_expression
postfix_expression :- postfix_expression '++'
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
expression :- assignment_expression
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
assignment_operator :- '='
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
assignment_expression :- unary_expression assignment_operator assignment_expression
expression :- assignment_expression
expression_statement :- expression_opt ; 
statement :- expression_statement
block_item :- statement 
block_item_list :- block_item
compound_statement :- { block_item_list_opt } 
statement :- compound_statement
iteration_statement :- for ( expression_opt ; expression_opt ; expression_opt ) statement
statement :- iteration_statement
block_item :- statement 
block_item_list :- block_item_list block_item
type_specifier :- char
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
direct_declarator :- direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
declarator :- pointer_opt direct_declarator
primary_expression :- string_literal
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
initializer :- assignment_expression
init_declarator :- declarator = initializer
init_declarator_list :- init_declarator
declaration :- declaration_specifiers init_declarator_list_opt ;
block_item :- declaration 
block_item_list :- block_item_list block_item
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- relational_expression '<' shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
expression :- assignment_expression
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
assignment_operator :- '='
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
assignment_expression :- unary_expression assignment_operator assignment_expression
expression :- assignment_expression
expression_statement :- expression_opt ; 
statement :- expression_statement
block_item :- statement 
block_item_list :- block_item
primary_expression :- identifier
postfix_expression :- primary_expression
postfix_expression :- postfix_expression '++'
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
expression :- assignment_expression
expression_statement :- expression_opt ; 
statement :- expression_statement
block_item :- statement 
block_item_list :- block_item_list block_item
compound_statement :- { block_item_list_opt } 
statement :- compound_statement
iteration_statement :- while ( expression) statement
statement :- iteration_statement
block_item :- statement 
block_item_list :- block_item_list block_item
primary_expression :- identifier
postfix_expression :- primary_expression
postfix_expression :- postfix_expression '++'
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
expression :- assignment_expression
expression_statement :- expression_opt ; 
statement :- expression_statement
block_item :- statement 
block_item_list :- block_item
compound_statement :- { block_item_list_opt } 
statement :- compound_statement
primary_expression :- identifier
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- relational_expression '<' shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
expression :- assignment_expression
iteration_statement :- do statement while ( expression) ;
statement :- iteration_statement
block_item :- statement 
block_item_list :- block_item_list block_item
type_specifier :- bool
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
declarator :- pointer_opt direct_declarator
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
initializer :- assignment_expression
init_declarator :- declarator = initializer
init_declarator_list :- init_declarator
declaration :- declaration_specifiers init_declarator_list_opt ;
block_item :- declaration 
block_item_list :- block_item_list block_item
type_specifier :- imaginary
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
declarator :- pointer_opt direct_declarator
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
initializer :- assignment_expression
init_declarator :- declarator = initializer
init_declarator_list :- init_declarator
declaration :- declaration_specifiers init_declarator_list_opt ;
block_item :- declaration 
block_item_list :- block_item_list block_item
type_specifier :- complex
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
declarator :- pointer_opt direct_declarator
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
initializer :- assignment_expression
init_declarator :- declarator = initializer
init_declarator_list :- init_declarator
declaration :- declaration_specifiers init_declarator_list_opt ;
block_item :- declaration 
block_item_list :- block_item_list block_item
type_specifer :- int
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
declarator :- pointer_opt direct_declarator
primary_expression :- identifier
postfix_expression :- primary_expression
postfix_expression :- postfix_expression '(' argument_expression_list_opt ')'
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
initializer :- assignment_expression
init_declarator :- declarator = initializer
init_declarator_list :- init_declarator
declaration :- declaration_specifiers init_declarator_list_opt ;
block_item :- declaration 
block_item_list :- block_item_list block_item
primary_expression :- identifier
postfix_expression :- primary_expression
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
argument_expression_list :- assignment_expression
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
argument_expression_list :- argument_expression_list ',' assignment_expression
postfix_expression :- postfix_expression '(' argument_expression_list_opt ')'
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
expression :- assignment_expression
expression_statement :- expression_opt ; 
statement :- expression_statement
block_item :- statement 
block_item_list :- block_item_list block_item
type_specifier :- char
declaration_specifiers :- type_specifier declaration_specifiers_opt
direct_declarator :- IDENTIFIER
declarator :- pointer_opt direct_declarator
primary_expression :- identifier
postfix_expression :- primary_expression
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
argument_expression_list :- assignment_expression
primary_expression :- constant
postfix_expression :- primary_expression
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
argument_expression_list :- argument_expression_list ',' assignment_expression
postfix_expression :- postfix_expression '(' argument_expression_list_opt ')'
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
initializer :- assignment_expression
init_declarator :- declarator = initializer
init_declarator_list :- init_declarator
declaration :- declaration_specifiers init_declarator_list_opt ;
block_item :- declaration 
block_item_list :- block_item_list block_item
primary_expression :- identifier
postfix_expression :- primary_expression
postfix_expression :- postfix_expression '(' argument_expression_list_opt ')'
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
expression :- assignment_expression
expression_statement :- expression_opt ; 
statement :- expression_statement
block_item :- statement 
block_item_list :- block_item_list block_item
primary_expression :- identifier
postfix_expression :- primary_expression
postfix_expression :- postfix_expression '(' argument_expression_list_opt ')'
unary_expression :- postfix_expression
cast_expression :- unary_expression
multiplicative_expression :- cast_expression
additive_expression :- multiplicative_expression
shift_expression :- additive_expression
relational_expression :- shift_expression
equality_expression :- relational_expression
and_expression :- equality_expression
exclusive_or_expression :- and_expression
inclusive_or_expression :- exclusive_or_expression
logical_and_expression :- inclusive_or_expression
logical_or_expression :- logical_and_expression
conditional_expression :- logical_or_expression
assignment_expression :- conditional_expression
expression :- assignment_expression
expression_statement :- expression_opt ; 
statement :- expression_statement
block_item :- statement 
block_item_list :- block_item_list block_item
compound_statement :- { block_item_list_opt } 
function_definition
external_declaration :- function_definition
translation_unit :- translation_unit external_declaration
